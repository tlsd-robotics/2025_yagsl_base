// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import com.revrobotics.RelativeEncoder;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkBase.ResetMode;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.config.SparkMaxConfig;
import com.revrobotics.spark.config.SparkBaseConfig.IdleMode;
import com.thethriftybot.ThriftyNova.PIDConfig;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ElevatorConstants;
import swervelib.parser.PIDFConfig;

public class ElevatorSubsystem extends SubsystemBase {

  private SparkMax elevator = new SparkMax(ElevatorConstants.ELEVATOR_MOTOR_ID, MotorType.kBrushless);
  private RelativeEncoder elevatorRelativeEncoder = elevator.getEncoder();
  private SparkMaxConfig config = new SparkMaxConfig();
  private double setPoint = ElevatorConstants.SETPOINT_HOME;

  private PIDController upAndDownThingy = new PIDController(
    ElevatorConstants.PID_P,
    ElevatorConstants.PID_I,
    ElevatorConstants.PID_D
  );

  /** Creates a new ElevatorSubsystem. */
  public ElevatorSubsystem() {
    config.idleMode(IdleMode.kBrake);
    config.encoder.positionConversionFactor(ElevatorConstants.CONVERSION_FACTOR);
    elevator.configure(config, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
  }

  public double getPosition() {
    return elevatorRelativeEncoder.getPosition();
  }

  public void setElevator(double setPoint) {
    double output = upAndDownThingy.calculate(getPosition(), setPoint);
    elevator.set(output);
  }

  public void setSetPoint(double setPoint) {
    this.setPoint = setPoint;
  }
  
  @Override
  public void periodic() {
    SmartDashboard.putNumber("Motor Encoder (elevator): ", getPosition());
    setElevator(setPoint);
  }
}
